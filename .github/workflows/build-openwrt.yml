#
# 请大家记住拉取的是我的 281677160/build-actions 仓库，拉取的是其他仓库有问题，别问我，我也不清楚什么问题
#
# 因为SSH连接配置固件直接编译，会给github停止编译的,所以要另外触发启动编译程序
#
# 新注册的帐号，SSH连接服务器的时间最好不要太长，10分钟左右就退出，没设置完就再来一次或者多次应该比较好
#
# 运行此程序不是直接编译，是修改配置文件和触发编译，正确运行完毕后，在Actions刷新网页看看你的编译程序运行了没有
#
# 如果不能触发compile启动,那您就设置好compile.yml文件，下载好.config配置文件覆盖到对应源码，再用compile.yml启动
#
# 一般情况下都能触发启动编译的，除非没设置好密匙，或者密匙过期了，或者密匙错误之类的
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#

name: 触发compile启动编译
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: '[ssh-actions]改成[ssh],再按[Run workflow]按钮启动,则开启SSH连接配置固件'
        required: false
        default: 'ssh-actions'
      days:
        description: '清理[X]天之前的Actions空间操作记录(可改)'
        required: true
        default: '7'
      rele:
        description: '保留[X]个Releases不被删除(可改)'
        required: true
        default: '10'


# 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
#  schedule:
#   - cron: 0 9 * * *


env:
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Apidz: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 启动${{matrix.target}}编译
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_source]

        # [Lede_source,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

    
    steps:
    - name: 准备结束
      uses: actions/checkout@v2

    - name: 读取脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
        echo "USE_CACHEWRTBUILD=${USE_CACHEWRTBUILD}" >> $GITHUB_ENV
        echo "BY_INFORMATION=${BY_INFORMATION}" >> $GITHUB_ENV
        echo "CangKu=${Apidz##*/}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV 

    - name: 读取扩展文件
      run: |
        echo
        git clone --depth 1 -b main https://github.com/281677160/common build/common > /dev/null 2>&1
        chmod -R +x "${GITHUB_WORKSPACE}/build/common"
        echo "BILDYML=$(grep "compileop" -rl ${GITHUB_WORKSPACE}/.github |cut -d "/" -f9)" >> $GITHUB_ENV
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "DELETE=package/base-files/files/etc/deletefile" >> $GITHUB_ENV
        if [[ "${Modelfile}" == "openwrt_amlogic" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=amlogic" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "master" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lede" >> $GITHUB_ENV
          echo "OpenWrt_name=18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          echo "ZZZ=package/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lienol" >> $GITHUB_ENV
          echo "OpenWrt_name=19.07" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/99-default-settings" >> $GITHUB_ENV
          echo "CODE=Tianling" >> $GITHUB_ENV
          echo "OpenWrt_name=tl-18.06" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/99-default-settings" >> $GITHUB_ENV
          echo "CODE=Mortal" >> $GITHUB_ENV
          echo "OpenWrt_name=21.02" >> $GITHUB_ENV
        fi
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y subversion build-essential libncurses5-dev openssl libssl-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 下载"${{matrix.target}}"源码
      working-directory: /workdir
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt > /dev/null 2>&1
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd $GITHUB_WORKSPACE/openwrt
        ./scripts/feeds update -a > /dev/null 2>&1
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
 
    - name: 加载源,补丁和自定义设置
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        mv -f "${Home}"/build/common/*.sh "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        cd openwrt
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_BRANCH}" == "openwrt-18.06" ]]; then
          source "${PATH1}/common.sh" && Diy_Tianling
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          source "${PATH1}/common.sh" && Diy_mortal
        fi
        source "${PATH1}/common.sh" && Diy_all > /dev/null 2>&1
        /bin/bash "${PATH1}/$DIY_PART_SH"
        ./scripts/feeds update -a > /dev/null 2>&1
        ./scripts/feeds install -a > /dev/null 2>&1
        ./scripts/feeds install -a
        [[ -e "$PATH1/$CONFIG_FILE" ]] && mv "$PATH1/$CONFIG_FILE" .config
        if [[ "${REGULAR_UPDATE}" == "true" ]]; then
          source "${PATH1}/upgrade.sh" && Diy_Part1
        fi
        
    - name: SSH远程连接（制作.config配置文件）
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh')
      uses: danshui-git/debugger-action@master
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成"${{matrix.target}}"配置文件
      id: compileop
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chajian > /dev/null 2>&1
        make defconfig > /dev/null 2>&1
        ./scripts/diffconfig.sh > ${GITHUB_WORKSPACE}/${CONFIG_FILE}
        cp -Rf ${GITHUB_WORKSPACE}/${CONFIG_FILE} ${GITHUB_WORKSPACE}/config.txt
        echo "::set-output name=status::success"
        echo "TARGET_BOARD=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
        if [ `grep -c "CONFIG_TARGET_x86_64=y" .config` -eq '1' ]; then
         echo "TARGET_PROFILE=x86-64" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET_x86_generic=y" .config` -eq '1' ]; then
         echo "TARGET_PROFILE=x86-32" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET.*DEVICE.*=y" .config` -eq '1' ]; then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "TARGET_PROFILE=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "TARGET_PROFILE=armvirt" >> $GITHUB_ENV
        fi
        
    - name: 上传.config配置文件在 github actions
      if: env.UPLOAD_CONFIG == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: .config_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: config.txt
        
    - name: 同步上游compile.yml和build-openwrt.yml文件
      if: steps.compileop.outputs.status == 'success' && env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/281677160/build-actions.git shangyouck
        git clone -b main https://github.com/${{github.repository}}.git repo
        echo "CRON2=$(grep -A 1 'schedule:' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |cut -d "#" -f1 |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        echo "CRON1=$(grep -A 1 'schedule:' shangyouck/.github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed s/^#// |sed 's/^[ ]*//g' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        if [[ `grep 'cron:' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |sed 's/^[ ]*//g' |grep '^-\ cron'` ]]; then
          sed -i 's/^#\(.*schedule:\)/\1/' shangyouck/.github/workflows/build-openwrt.yml
          sed -i 's/^#\(.*- cron:\)/\1/' shangyouck/.github/workflows/build-openwrt.yml
        fi
        echo "TARGET1=$(grep 'target: \[' shangyouck/.github/workflows/build-openwrt.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "TARGET2=$(grep 'target: \[' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}}  |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "QIDONG1=$(grep -A 1 'paths:' shangyouck/.github/workflows/compile.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')" >> $GITHUB_ENV
        echo "QIDONG2=- 'build\/${{matrix.target}}\/start-up\/start'" >> $GITHUB_ENV
        echo "TARGE1=$(grep 'target: \[' shangyouck/.github/workflows/compile.yml |sed 's/^[ ]*//g' |grep '^target' |cut -d '#' -f1 |sed 's/\[/\\&/' |sed 's/\]/\\&/')" >> $GITHUB_ENV
        echo "TARGE2=target: \\[${{matrix.target}}\\]" >> $GITHUB_ENV
        echo "BEIYONG1=$(grep -A 2 'target:' shangyouck/.github/workflows/build-openwrt.yml |grep '\# \[.*\]' | sed -r 's/\# \[(.*)\]/\1/' |sed 's/^[ ]*//g')" >> $GITHUB_ENV
        echo "BEIYONG2=$(grep -A 2 'target:' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |grep '\# \[.*\]' | sed -r 's/\# \[(.*)\]/\1/' |sed 's/^[ ]*//g')" >> $GITHUB_ENV
        echo "QDMAME1=$(sed -n '1,50p' shangyouck/.github/workflows/build-openwrt.yml |grep '^name' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        echo "QDMAME2=$(sed -n '1,50p' $GITHUB_WORKSPACE/.github/workflows/${{env.BILDYML}} |grep '^name' |sed 's/\//\\&/g' |sed 's/\*/\\&/g')" >> $GITHUB_ENV
        if [[ `grep -c "WORKSPACE}/Clear" $GITHUB_WORKSPACE/repo/build/${{matrix.target}}/diy-part.sh` == '0' ]]; then
        echo '
        # 整理固件包时候,删除您不想要的固件或者文件,让它不需要上传到Actions空间
        cat >${GITHUB_WORKSPACE}/Clear <<-EOF
        rm -rf config.buildinfo
        rm -rf feeds.buildinfo
        rm -rf sha256sums
        rm -rf version.buildinfo
        EOF
        ' >> $GITHUB_WORKSPACE/repo/build/${{matrix.target}}/diy-part.sh
          echo "GONGGAO1=(diy-part.sh更新,注意查看固件包减负说明)编译${{env.TARGET_PROFILE}}固件" >> $GITHUB_ENV
        else
          echo "GONGGAO1=编译${{env.CODE}}-${{env.TARGET_PROFILE}}固件" >> $GITHUB_ENV
        fi
    
    - name: 触发compile.yml启动"${{matrix.target}}"编译
      if: steps.compileop.outputs.status == 'success' && env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        if [[ -n "${{env.QDMAME1}}" ]] && [[ -n "${{env.QDMAME2}}" ]]; then
          sed -i "s/${{env.QDMAME1}}/${{env.QDMAME2}}/g" shangyouck/.github/workflows/build-openwrt.yml
        fi
        if [[ -n "${{env.BEIYONG1}}" ]] && [[ -n "${{env.BEIYONG2}}" ]]; then
          sed -i "s/${{env.BEIYONG1}}/${{env.BEIYONG2}}/g" shangyouck/.github/workflows/build-openwrt.yml
        fi
        if [[ -n "${{env.CRON1}}" ]] && [[ -n "${{env.CRON2}}" ]]; then
          sed -i "s/${{env.CRON1}}/${{env.CRON2}}/g" shangyouck/.github/workflows/build-openwrt.yml
        fi
        if [[ -n "${{env.TARGET1}}" ]] && [[ -n "${{env.TARGET2}}" ]]; then
          sed -i "s/${{env.TARGET1}}/${{env.TARGET2}}/g" shangyouck/.github/workflows/build-openwrt.yml
        fi
        if [[ -n "${{env.TARGE1}}" ]] && [[ -n "${{env.TARGE2}}" ]]; then
          sed -i "s/${{env.TARGE1}}/${{env.TARGE2}}/g" shangyouck/.github/workflows/compile.yml
        fi
        if [[ -n "${{env.QIDONG1}}" ]] && [[ -n "${{env.QIDONG2}}" ]]; then
          sed -i "s/${{env.QIDONG1}}/${{env.QIDONG2}}/g" shangyouck/.github/workflows/compile.yml
        fi
        if [[ `grep -c "weixin4.png" $GITHUB_WORKSPACE/repo/README.md` == '0' ]]; then
          cp -Rf $GITHUB_WORKSPACE/shangyouck/README.md $GITHUB_WORKSPACE/repo
        fi
        cd repo
        if [[ -n "$(ls -A "build/${{matrix.target}}/${CONFIG_FILE}" 2>/dev/null)" ]]; then
          git rm -rf build/${{matrix.target}}/${CONFIG_FILE}
        fi
        cp -Rf $GITHUB_WORKSPACE/${CONFIG_FILE} build/${{matrix.target}}/${CONFIG_FILE}
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/compile.yml" 2>/dev/null)" ]]; then
          git rm -rf $GITHUB_WORKSPACE/repo/.github/workflows/compile.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyouck/.github/workflows/compile.yml .github/workflows/compile.yml
        if [[ -n "$(ls -A "$GITHUB_WORKSPACE/repo/.github/workflows/synchronization.yml" 2>/dev/null)" ]]; then
          git rm -rf $GITHUB_WORKSPACE/repo/.github/workflows/synchronization.yml
        fi
        cp -Rf $GITHUB_WORKSPACE/shangyouck/.github/workflows/synchronization.yml .github/workflows/synchronization.yml
        git rm -rf $GITHUB_WORKSPACE/repo/.github/workflows/${{env.BILDYML}}
        cp -Rf $GITHUB_WORKSPACE/shangyouck/.github/workflows/build-openwrt.yml .github/workflows/build-openwrt.yml
        mkdir -p build/${{matrix.target}}/start-up
        echo "${{env.CODE}}于$(date +%Y年%m月%d号%H时%M分%S秒)自动触发编译${{env.TARGET_PROFILE}}固件" > build/${Modelfile}/start-up/start
        git add .
        git commit -m "${{env.GONGGAO1}}"
        git push --force "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
        
    - name: 编译信息
      continue-on-error: true
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chuli > /dev/null 2>&1
        if [ "${BY_INFORMATION}" == "true" ]; then
          source "${PATH1}/upgrade.sh" && GET_TARGET_INFO
          source "${PATH1}/common.sh" && Diy_xinxi
        fi
    
    - name: 清理Actions空间
      if: env.REPO_TOKEN
      uses: Mattraks/delete-workflow-runs@main
      with:
          token: ${{ secrets.REPO_TOKEN }}
          repository: ${{ github.repository }}
          keep_minimum_runs: 0
          retain_days: ${{ github.event.inputs.days }}
    
    - name: 删除releases
      if: env.REPO_TOKEN
      uses: dev-drprasad/delete-older-releases@master
      with:
        repo: ${{ github.repository }}
        keep_latest: ${{ github.event.inputs.rele }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
